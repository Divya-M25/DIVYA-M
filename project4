import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# Step 1: Load and preprocess the data
data = pd.read_csv(r'C:\Users\user\Desktop\New folder\train.csv')
data['Order Date'] = pd.to_datetime(data['Order Date'], format='%d/%m/%Y')

# Step 2: Set 'Order Date' column as index
data.set_index('Order Date', inplace=True)

# Step 3: Explore data and visualize sales trends
monthly_sales = data['Sales'].resample('ME').sum()  # Resample monthly and sum sales
plt.figure(figsize=(10, 6))
plt.plot(monthly_sales)
plt.title('Monthly Sales Trends')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.show()

# Step 4: Split data into training and testing sets
train_size = int(len(monthly_sales) * 0.8)
train, test = monthly_sales[:train_size], monthly_sales[train_size:]

# Step 5-6: Choose and train a time series forecasting model (ARIMA)
# Define and fit ARIMA model
order = (1, 1, 1)  # (p, d, q) parameters for ARIMA model
model = ARIMA(train, order=order)
model_fit = model.fit()

# Step 7: Evaluate model performance
# Forecast sales using the trained model
forecast = model_fit.forecast(steps=len(test))

# Step 8: Evaluate model performance
mse = mean_squared_error(test, forecast)
print("Mean Squared Error:", mse)

# Step 9: Visualize forecasted sales
plt.figure(figsize=(10, 6))
plt.plot(test.index, test, label='Actual Sales')
plt.plot(test.index, forecast, color='red', linestyle='--', label='Forecasted Sales')
plt.title('Forecasted Sales vs Actual Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.show()
